import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption
import numpy as np

Import('env')
localenv = env.Clone()

# Set up state
nest = SConsWrap(Nest(), localenv['output'], alias_environment=localenv)

NUM_ITERS = 30
NUM_SEEDS = 3
NUM_VAR = 2
BATCH_SIZE = 50
BETA_SHIFT_TIME = 3
DELTA = 0.02
ALPHA = 0.1
PROPENSITY_BETA = '6,0,0'
PROPENSITY_INTERCEPT = 0
INTERCEPT = 0
SOURCE_BETA = '0,0,0,1.5,-1.5'
TARGET_BETA = '0,0,0,1,-1'
X_SOURCE_MEAN = ",".join(["2"] * NUM_VAR)

@nest.add_target_with_env(localenv)
def make_train_data(env, outdir, c):
    targets = [
        join(outdir, 'source_data.csv'),
        join(outdir, 'train_data_gen.pkl'),
    ]

    cmd = [
        'python',
        'generate_data.py',
        '--data-type',
        'simple',
        '--num-obs',
        5000,
        '--seed-offset',
        0,
        '--x-mean',
        X_SOURCE_MEAN,
        '--intercept=%.2f' % INTERCEPT,
        '--shift-type',
        'small_x_shift',
        '--source-beta',
        SOURCE_BETA,
        '--target-beta',
        TARGET_BETA,
        "--propensity-beta=%s" % PROPENSITY_BETA,
        '--propensity-intercept=%.2f' % PROPENSITY_INTERCEPT,
        '--out-source-file ${TARGETS[0]}',
        '--out-data-gen ${TARGETS[1]}',
    ]
    # cmd = [
    #     'python run_script.py',
    #     '--cluster',
    #     localenv['cluster'],
    #     '--target-template-file',
    #     '${TARGETS[0]}',
    #     '--num-jobs',
    #     NUM_JOBS,
    #     '--run-line="%s"' % ' '.join(map(str, orig_cmd)),
    # ]
    return env.Command(
        targets,
        [],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def train_ml(env, outdir, c):
    targets = [
        join(outdir, 'mdl.pkl'),
        join(outdir, 'log_ml.txt'),
        join(outdir, 'perf_ml_source.png'),
        join(outdir, 'perf_ml_target.png'),
    ]
    cmd = [
        'python train_ml.py',
        '--seed-offset',
        0,
        '--train-frac',
        0.5,
        '--model',
        'RandomForestClassifier',
        '--train-data ${SOURCES[0]}',
        '--data-gen ${SOURCES[1]}',
        '--mdl ${TARGETS[0]}',
        '--log ${TARGETS[1]}',
        '--plot-source ${TARGETS[2]}',
        '--plot-target ${TARGETS[3]}',
    ]
    # cmd = [
    #     'python run_script.py',
    #     '--cluster',
    #     localenv['cluster'],
    #     '--target-template-file',
    #     '${TARGETS[0]}',
    #     '--num-jobs',
    #     NUM_JOBS,
    #     '--run-line="%s"' % ' '.join(map(str, orig_cmd)),
    # ]
    return env.Command(
        targets,
        c['make_train_data'],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def make_prechange_environment(env, outdir, c):
    targets = [
        join(outdir, 'data_gen.pkl'),
    ]

    cmd = [
        'python make_environment.py',
        '--data-type',
        'simple',
        '--x-mean',
        X_SOURCE_MEAN,
        "--propensity-beta=%s" % PROPENSITY_BETA,
        '--propensity-intercept=%.2f' % PROPENSITY_INTERCEPT,
        '--beta-shift-time',
        BETA_SHIFT_TIME,
        '--intercept=%.2f' % INTERCEPT,
        '--target-beta',
        TARGET_BETA,
        '--source-beta',
        SOURCE_BETA,
        '--out-data-gen-file ${TARGETS[0]}',
    ]
    # cmd = [
    #     'python run_script.py',
    #     '--cluster',
    #     localenv['cluster'],
    #     '--target-template-file',
    #     '${TARGETS[0]}',
    #     '--num-jobs',
    #     NUM_JOBS,
    #     '--run-line="%s"' % ' '.join(map(str, orig_cmd)),
    # ]
    return env.Command(
        targets,
        [],
        ' '.join(map(str, cmd)))

nest.add_aggregate('res_agg', list)
nest.add(
    'seed',
    range(NUM_SEEDS)
)

@nest.add_target_with_env(localenv)
def monitor(env, outdir, c):
    targets = [
        join(outdir, 'log.txt'),
        join(outdir, 'res.csv'),
    ]

    cmd = [
        'python do_monitor_seq.py',
        '--data-gen ${SOURCES[0]}',
        '--mdl ${SOURCES[1]}',
        '--alpha',
        ALPHA,
        '--delta',
        DELTA,
        '--batch-size',
        BATCH_SIZE,
        '--num-iters',
        NUM_ITERS,
        '--seed-offset',
        c['seed'],
        '--log-file ${TARGETS[0]}',
        '--out-file ${TARGETS[1]}',
    ]
    # cmd = [
    #     'python run_script.py',
    #     '--cluster',
    #     localenv['cluster'],
    #     '--target-template-file',
    #     '${TARGETS[0]}',
    #     '--num-jobs',
    #     NUM_JOBS,
    #     '--run-line="%s"' % ' '.join(map(str, orig_cmd)),
    # ]
    c['res_agg'].append(targets[1])
    return env.Command(
        targets,
        [
            c['make_prechange_environment'][0],
            c['train_ml'][0],
        ],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def plot_cusum(env, outdir, c):
    targets = [
        join(outdir, 'plot_cusum.png'),
    ]

    cmd = [
        'python plot_cusum.py',
        '--res ${SOURCES[1]}',
        '--plot-file ${TARGETS[0]}',
    ]
    # cmd = [
    #     'python run_script.py',
    #     '--cluster',
    #     localenv['cluster'],
    #     '--target-template-file',
    #     '${TARGETS[0]}',
    #     '--num-jobs',
    #     NUM_JOBS,
    #     '--run-line="%s"' % ' '.join(map(str, orig_cmd)),
    # ]
    return env.Command(
        targets,
        c['monitor'],
        ' '.join(map(str, cmd)))

nest.pop('seed')

@nest.add_target_with_env(localenv)
def aggregate(env, outdir, c):
    targets = [
        join(outdir, 'plot_power.png'),
    ]
    res_files = ','.join([join('simulation_estimands', f) for f in c['res_agg']])

    cmd = [
        'python plot_estimands.py',
        '--result',
        res_files,
        '--plot ${TARGETS[0]}',
    ]
    return env.Command(
        targets,
        c['res_agg'],
        ' '.join(map(str, cmd)))
